/*
解题思路：双指针
1、创建两个奇偶指针odd和even，分别指向奇数位置和偶数位置，每次跳2格
2、随便利用一个指针for循环遍历数组，比如用odd指针:
    2.1、如果当前元素为偶数的话，需要去找附近的奇数互换（因为odd位置为奇数才是正确的，为奇数时，就不用处理了，直接接着往后遍历就行）
    2.2、当even位置为偶数且不越界的话，说明他不需要互换，直接跳到下一个位置
    2.3、while循环直到碰到奇数，退出循环，进行互换操作
3、返回数组
*/
/**
 * @param {number[]} A
 * @return {number[]}
 */
var sortArrayByParityII = function (A) {
  // 1、创建两个奇偶指针odd和even，分别指向奇数位置和偶数位置，每次跳2格
  //   奇数指针
  let odd = 1;
  //   偶数指针
  let even = 0;

  //   2、随便利用一个指针for循环遍历数组，比如用odd指针:
  for (odd; odd < A.length; odd += 2) {
    // 2.1、如果当前元素为偶数的话，需要去找附近的奇数互换（因为odd位置为奇数才是正确的，为奇数时，就不用处理了，直接接着往后遍历就行）
    if (A[odd] % 2 === 0) {
      // 2.2、当even位置为偶数且不越界的话，说明他不需要互换，直接跳到下一个位置
      while (A[even] % 2 === 0 && even < A.length) {
        even += 2;
      }
      //   2.3、while循环直到碰到奇数，退出循环，进行互换操作
      [A[odd], A[even]] = [A[even], A[odd]];
    }
  }
  // 3、返回数组
  return A;
};
