/*
解题思路：方法二：求余法
由于整数除以10，得到余数总是等于该数的个位数字，这样可以从右到左依次取出整数的各个位置的数，
1、创建变量，记录Int范围，用于判断反转后是否溢出
2、创建变量，记录输入整数的符号
3、记录完符号后，就去绝对值，当作正整数来处理
4、创建变量，记录结果，初始化为0
5、创建变量，保存余数
6、while循环，当x等于0时，说明已经分离出最高位了，停止循环，否则：
  6.1、整数对10取余数，得到最低位
  6.2、整数减去余数再除以10，得到上面取余时的商（也就是剩下的高位数的整数，被除数=商*除数 + 余数）
  6.3、反转拼接整数
7、把符号还给反转后的整数，再判断是否溢出
8、返回结果
*/

/**
 * @param {number} x
 * @return {number}
 */
var reverse = function (x) {
  // 1、创建变量，记录Int范围，用于判断反转后是否溢出
  let min = Math.pow(-2, 31);
  let max = Math.pow(2, 31) - 1;

  // 2、创建变量，记录输入整数的符号
  //   Math.sign() 函数返回一个数字的符号, 指示数字是正数，负数还是零
  //   此函数共有5种返回值, 分别是 1, -1, 0, -0, NaN. 代表的各是正数, 负数, 正零, 负零, NaN。
  let sign = Math.sign(x);

  // 3、记录完符号后，就去绝对值，当作正整数来处理
  x = Math.abs(x);

  // 4、创建变量，记录结果，初始化为0
  let result = 0;

  // 5、创建变量，保存余数
  let remainder;

  // 6、while循环，当x等于0时，说明已经分离出最高位了，停止循环，否则：
  while (x !== 0) {
    // 6.1、整数对10取余数，得到最低位
    remainder = x % 10;

    // 6.2、整数减去余数再除以10，得到上面取余时的商（也就是剩下的高位数的整数，被除数=商*除数 + 余数）
    x = (x - remainder) / 10;

    // 6.3、反转拼接整数
    result = result * 10 + remainder;
  }

  // 7、把符号还给反转后的整数，再判断是否溢出
  result = sign * result;
  if (result < min || result > max) {
    return 0;
  }

  // 8、返回结果
  return result;
};
